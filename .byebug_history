c
display_board
n
@won
n
move
next_moves
n
@adjacent.any? {|node| node.path_to_victory}
n
@path_to_victory
n
 @adjacent.any? {|node| node.path_to_victory}
n
@color
@won
n
@color
n
move
next_moves
n
next_moves
@adjacent.any? {|node| node.path_to_victory}
@path_to_victory
n
next_moves
n
@won
n
move
n
c
n
display_board
next_moves
n
move
n
c
n
next_moves
n
move
next_moves
n
@adjacent.each {|node| puts node.path_to_victory}
@adjacent.any? {|node| node.path_to_victory}
n
@color
paths_to_victory_on_next_current_player_move
n
next_moves
n
@adjacent.any? {|node| node.path_to_victory}
n
next_moves
display_board
next_moves
n
display_board
move
n
@adjacent
@path_to_victory
n
@won
paths_to_victory_on_next_current_player_move
next_moves
n
@won
next_moves
n
c
n
@color
next_moves
n
display_board
next_moves
n
new_node
n
c
n
next_moves
display_board
n
move
c
display_board
exit
paths_to_victory_on_next_current_player_move
move
display_board
next_moves
c
@adjacent.any? {|node| node.path_to_victory}
@adjacent
n
@won
game_over?
display_board
c
display_board
c
display_board
c
move
display_board
c
move
next_moves
c
exit
next_moves
n
next_moves
next_moes
n
exit
next_moves
n
exit
list
frame
d
display
8.downto(0).each {|pos| puts bits[pos]}
white.to_s(2)
black.to_s(2)
num.to_s(2)
0.upto(3).map { |pos| num[pos]}
num = 8
0.upto(3).map { |pos| num[pos]}
num = -4
0.upto(3).map { |pos| num[pos]}
0.upto(3).map { |pos| num.to_s(2)[pos]}
num = -1
0.upto(3).map { |pos| num.to_s(2)[pos]}
num = 8
n = 8
8.to_s(2)
bits.class
0.upto(8).map { |pos| bits[pos] }
0.upto(8).map { |pos| white.to_s(2).split("")[pos] }
0.upto(8).map { |pos| black.to_s(2).split("")[pos] }
0.upto(8).map { |pos| bits[pos] }
bits = ~(black | white)
next_moves
exit
c
next_moves
next_moes
display_board
c
Constants.positions.values.map {|el| el.to_s(2)}
Constants.positions.map {|el| el.to_s(2)}
Constants.positions
next_moves
display_board
exit
bits.to_s(2)
bits = ~(black | white)
white.to_s(2)
black.to_s(2)
0.upto(8).each {|pos| puts bits[pos]}
bits[8]
8.downto(0).each {|pos| puts bits[pos]}
8.downto(0).map { |pos| bits[pos] }
8.downto(0).select { |pos| pos unless bits[pos] == 0 }
bits = ~(black | white)
white.to_s(2)
black.to_s(2)
white
black
next_moves
display_board
exit
c
display_board
c
exit
292 & 293
Constants.winning_positions
Constants.winning_positions.map { |el| el.to_s(2) }
Constants.winning_positions.map { |el| el.to_s(2)
448 & current_player_played
current_player_played
448 && current_player_played
Constants.winning_positions
n
c
Constants.winning_positions
exit
Constants.winning_positions.map { |str| str.to_i(2) }
Constants.winning_positions.map(&:to_i,2)
Constants.winning_positions.map(&:to_i(2))
Constants.winning_positions.map(&:to_i)
Constants.winning_positions
"100100101".to_i(2)
"100100101"to_i(2)
@color
self.instance_variable_get("@#{@color}")
exit
binary_representation(@black).split("")
board
n
exit
new_node
next_moves
n
move
next_moves
c
exit
next_moves
move
c
next_moves
exit
next_moves
c
next_moves
c
next_moves
c
next_moves
n
@won
exit
next_moves
c
next_moves
exit
next_moves
c
exit
n
s
n
exit
c
next
next_moves
n
s
next_moves
n
next_moves
move
n
game_over?
@won
move
n
